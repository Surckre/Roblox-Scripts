--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

bit32 = {};
local N = 32;
local P = 2 ^ N;
bit32.bnot = function(x)
	x = x % P;
	return (P - 1) - x;
end;
bit32.band = function(x, y)
	if (y == 255) then
		return x % 256;
	end
	if (y == 65535) then
		return x % 65536;
	end
	if (y == 4294967295) then
		return x % 4294967296;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 2) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bor = function(x, y)
	if (y == 255) then
		return (x - (x % 256)) + 255;
	end
	if (y == 65535) then
		return (x - (x % 65536)) + 65535;
	end
	if (y == 4294967295) then
		return 4294967295;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) >= 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bxor = function(x, y)
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.lshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount < 0) then
		return math.floor(x * (2 ^ s_amount));
	else
		return (x * (2 ^ s_amount)) % P;
	end
end;
bit32.rshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		return math.floor(x * (2 ^ -s_amount));
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
bit32.arshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		local add = 0;
		if (x >= (P / 2)) then
			add = P - (2 ^ (N - s_amount));
		end
		return math.floor(x * (2 ^ -s_amount)) + add;
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
local ScreenGui = Instance.new("ScreenGui");
local MainFrame = Instance.new("Frame");
local LoadSlot = Instance.new("TextButton");
local Slot = Instance.new("TextBox");
local DelayBox = Instance.new("TextBox");
local DropAxesButton = Instance.new("TextButton");
local ScriptLabel = Instance.new("TextLabel");
local InventoryButton = Instance.new("TextButton");
ScreenGui.Parent = game.CoreGui;
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
MainFrame.Name = "LT2SimpleGui";
MainFrame.Parent = ScreenGui;
MainFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1);
MainFrame.BorderSizePixel = 2;
MainFrame.Position = UDim2.new(0.5, -100, 0.5, -220);
MainFrame.Size = UDim2.new(0, 200, 0, 230);
MainFrame.Active = true;
MainFrame.Draggable = true;
ScriptLabel.Name = "ScriptLabel";
ScriptLabel.Parent = MainFrame;
ScriptLabel.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2);
ScriptLabel.BorderSizePixel = 0;
ScriptLabel.Position = UDim2.new(0, 0, 0, 0);
ScriptLabel.Size = UDim2.new(1, 0, 0, 20);
ScriptLabel.Font = Enum.Font.SourceSans;
ScriptLabel.Text = "Script by Surckre";
ScriptLabel.TextColor3 = Color3.new(1, 1, 1);
ScriptLabel.TextSize = 14;
ScriptLabel.TextStrokeTransparency = 0.8;
Slot.Name = "Slot";
Slot.Parent = MainFrame;
Slot.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3);
Slot.BorderSizePixel = 1;
Slot.Position = UDim2.new(0, 10, 0, 30);
Slot.Size = UDim2.new(0, 180, 0, 30);
Slot.Font = Enum.Font.SourceSans;
Slot.Text = "Slot Number";
Slot.TextColor3 = Color3.new(1, 1, 1);
Slot.TextSize = 14;
DelayBox.Name = "DelayBox";
DelayBox.Parent = MainFrame;
DelayBox.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3);
DelayBox.BorderSizePixel = 1;
DelayBox.Position = UDim2.new(0, 10, 0, 70);
DelayBox.Size = UDim2.new(0, 180, 0, 30);
DelayBox.Font = Enum.Font.SourceSans;
DelayBox.Text = "Delay in Seconds";
DelayBox.TextColor3 = Color3.new(1, 1, 1);
DelayBox.TextSize = 14;
DropAxesButton.Name = "DropAxesButton";
DropAxesButton.Parent = MainFrame;
DropAxesButton.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3);
DropAxesButton.BorderSizePixel = 1;
DropAxesButton.Position = UDim2.new(0, 10, 0, 110);
DropAxesButton.Size = UDim2.new(0, 180, 0, 30);
DropAxesButton.Font = Enum.Font.SourceSans;
DropAxesButton.Text = "Drop Axes";
DropAxesButton.TextColor3 = Color3.new(1, 1, 1);
DropAxesButton.TextSize = 14;
LoadSlot.Name = "LoadSlot";
LoadSlot.Parent = MainFrame;
LoadSlot.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3);
LoadSlot.BorderSizePixel = 1;
LoadSlot.Position = UDim2.new(0, 10, 0, 150);
LoadSlot.Size = UDim2.new(0, 180, 0, 30);
LoadSlot.Font = Enum.Font.SourceSans;
LoadSlot.Text = "Start Dupe";
LoadSlot.TextColor3 = Color3.new(1, 1, 1);
LoadSlot.TextSize = 14;
InventoryButton.Name = "InventoryButton";
InventoryButton.Parent = MainFrame;
InventoryButton.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3);
InventoryButton.BorderSizePixel = 1;
InventoryButton.Position = UDim2.new(0, 10, 0, 190);
InventoryButton.Size = UDim2.new(0, 180, 0, 30);
InventoryButton.Font = Enum.Font.SourceSans;
InventoryButton.Text = "Count Axes";
InventoryButton.TextColor3 = Color3.new(1, 1, 1);
InventoryButton.TextSize = 14;
local ScriptLoadOrSave = false;
local function SendNotification(Title, Text, Duration)
	game.StarterGui:SetCore("SendNotification", {Title=Title,Text=Text,Icon=nil,Duration=Duration});
end
local function CheckSlotNumber()
	local SlotNumber = tonumber(Slot.Text);
	return (SlotNumber and (SlotNumber >= 1) and (SlotNumber <= 6) and SlotNumber) or false;
end
local function CheckIfSlotAvailable(Slot)
	for a, b in pairs(game.ReplicatedStorage.LoadSaveRequests.GetMetaData:InvokeServer(game.Players.LocalPlayer)) do
		if (a == Slot) then
			return (b.NumSaves and (b.NumSaves ~= 0)) or false;
		end
	end
	return false;
end
local function GetDelay()
	local Delay = tonumber(DelayBox.Text);
	return (Delay and (Delay > 0) and Delay) or 2;
end
local function DropAllAxes()
	local axesDropped = 0;
	for _, axe in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if (axe:IsA("Tool") and (axe.Name ~= "BlueprintTool")) then
			game.ReplicatedStorage.Interaction.ClientInteracted:FireServer(axe, "Drop tool", game.Players.LocalPlayer.Character.Head.CFrame);
			axesDropped = axesDropped + 1;
			wait(0.5);
		end
	end
	SendNotification("Axes Dropped", "Dropped " .. axesDropped .. " Axes", 5);
end
local function ShowAndReduceInventory()
	local player = game.Players.LocalPlayer;
	local backpack = player.Backpack;
	local itemCount = #backpack:GetChildren();
	local reducedCount = itemCount - 1;
	SendNotification("Axes in Inventory", "Axes in Inventory: " .. reducedCount, 5);
end
LoadSlot.MouseButton1Down:Connect(function()
	local CheckSlot = CheckSlotNumber();
	local Delay = GetDelay();
	if CheckSlot then
		if CheckIfSlotAvailable(CheckSlot) then
			ScriptLoadOrSave = true;
			game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(10000, 10, 100));
			SendNotification("Teleport Notification", "Teleported to coordinates", 2);
			wait(Delay);
			local result = game.ReplicatedStorage.LoadSaveRequests.RequestLoad:InvokeServer(CheckSlot);
			if result then
				SendNotification("Reload Notification", "Slot reloaded successfully", 2);
			else
				SendNotification("Reload Error", "Failed to reload slot", 2);
			end
			ScriptLoadOrSave = false;
		else
			SendNotification("Slot Not Available", "Choose another slot", 2);
		end
	else
		SendNotification("Incorrect Slot", "Enter a valid number (1-6) in the slot field", 1);
	end
end);
DropAxesButton.MouseButton1Down:Connect(function()
	DropAllAxes();
end);
InventoryButton.MouseButton1Down:Connect(function()
	ShowAndReduceInventory();
end);
local function ChangeBorderColor()
	while true do
		for i = 0, 1, 0.01 do
			MainFrame.BorderColor3 = Color3.fromHSV(i, 0.7, 1);
			wait(0.05);
		end
	end
end
spawn(ChangeBorderColor);
